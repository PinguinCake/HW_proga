package main;

import battle.Battle;
import bot.Bot;
import buildings.Building;
import buildings.Stable;
import buildings.Tavern;
import buildings.WatchTower;
import mapeditor.MapEditor;
import mapeditor.MapJsonImporter;
import save.GameSaveManager;
import score.ScoreManager;
import units.Hero;
import units.Spearman;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("=== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===");
        System.out.println("1 - –ù–æ–≤–∞—è –∏–≥—Ä–∞");
        System.out.println("2 - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É");
        System.out.println("3 - –†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç");
        System.out.println("4 - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ—Ä–¥—ã");
        System.out.print("–í—ã–±–æ—Ä: ");
        String choice = scanner.nextLine();

        switch (choice) {
            case "1" -> {
                System.out.println("–†–µ–∂–∏–º –∏–≥—Ä—ã (1 - PvP, 2 - PvE): ");
                int mode = Integer.parseInt(scanner.nextLine());

                GameMap gameMap;
                System.out.print("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ JSON? (y/n): ");
                if (scanner.nextLine().equalsIgnoreCase("y")) {
                    System.out.print("–ò–º—è JSON-—Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, map1.json): ");
                    String jsonFile = scanner.nextLine();
                    gameMap = MapJsonImporter.importFromJson(jsonFile, 12, 12);
                } else {
                    gameMap = new GameMap(12, 12);
                    gameMap.initZonesAndRoad();
                    gameMap.scatterGold(10);
                }

                // –ì–µ—Ä–æ–∏
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è –∏–≥—Ä–æ–∫–∞ 1: ");
                String name1 = scanner.nextLine();
                Hero hero1 = new Hero(name1, 200, 30, 2, 4, 0, 0, gameMap, "Player1");
                gameMap.addHero(hero1, 0, 0);

                Hero hero2;
                if (mode == 1) {
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è –∏–≥—Ä–æ–∫–∞ 2: ");
                    String name2 = scanner.nextLine();
                    hero2 = new Hero(name2, 200, 30, 2, 4, 11, 11, gameMap, "Player2");
                } else {
                    hero2 = new Hero("AI", 200, 30, 2, 4, 11, 11, gameMap, "AI");
                }
                gameMap.addHero(hero2, 11, 11);

                List<Hero> playerHeroes = new ArrayList<>();
                playerHeroes.add(hero1);

                List<Hero> enemyHeroes = new ArrayList<>();
                enemyHeroes.add(hero2);

                // –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
                boolean gameRunning = true;
                while (gameRunning) {
                    gameMap.displayMap();

                    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è
                    System.out.println("\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è:");
                    for (int i = 0; i < playerHeroes.size(); i++) {
                        System.out.println((i + 1) + ". " + playerHeroes.get(i).getName());
                    }
                    int heroChoice = Integer.parseInt(scanner.nextLine()) - 1;
                    Hero activeHero = playerHeroes.get(heroChoice);

                    System.out.println("–•–æ–¥ –≥–µ—Ä–æ—è " + activeHero.getName() + ". –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:");
                    String[] input = scanner.nextLine().split(" ");
                    switch (input[0]) {
                        case "move" -> activeHero.move(Integer.parseInt(input[1]), Integer.parseInt(input[2]));
                        case "buy" -> activeHero.buyRandomUnit();
                        case "buyMany" -> activeHero.buyMultipleUnits(Integer.parseInt(input[1]));
                        case "build" -> {
                            Building b = switch (input[1]) {
                                case "tavern" -> new Tavern();
                                case "stable" -> new Stable();
                                case "tower" -> new WatchTower();
                                default -> null;
                            };
                            if (b != null) activeHero.addBuilding(b);
                        }
                        case "hire" -> {
                            if (activeHero.canHireNewHeroes()) {
                                Hero newHero = new Hero(
                                        activeHero.getName() + "_extra",
                                        180, 25, 2, 3,
                                        activeHero.getX(), activeHero.getY(),
                                        gameMap, activeHero.getOwner()
                                );
                                gameMap.addHero(newHero, newHero.getX(), newHero.getY());
                                playerHeroes.add(newHero);
                                System.out.println("–ù–∞–Ω—è—Ç –Ω–æ–≤—ã–π –≥–µ—Ä–æ–π: " + newHero.getName());
                            } else {
                                System.out.println("–¢–∞–≤–µ—Ä–Ω–∞ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞.");
                            }
                        }
                        case "exit" -> gameRunning = false;
                    }

                    // –ë–æ—Ç –∏–ª–∏ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
                    if (mode == 2) {
                        Hero bot = enemyHeroes.get(0);
                        Bot.performBotAction(bot, gameMap);
                    } else {
                        System.out.println("–•–æ–¥ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (" + hero2.getName() + ")...");
                        // –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–π –≤–≤–æ–¥ –∏–ª–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥
                    }

                    // –ü–æ–±–µ–¥–∞
                    if (hero2.isDefeated()) {
                        System.out.println("üéâ –ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ 1!");
                        ScoreManager.recordScore(hero1.getName(), gameMap.getMapNameOrDefault(), hero1.getGold());
                        gameRunning = false;
                    } else if (hero1.isDefeated()) {
                        System.out.println("üíÄ –ü–æ–±–µ–¥–∏–ª " + hero2.getName());
                        ScoreManager.recordScore(hero2.getName(), gameMap.getMapNameOrDefault(), hero2.getGold());
                        gameRunning = false;
                    }
                }
            }

            case "2" -> {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ");
                String filename = scanner.nextLine();
                Object[] loaded = GameSaveManager.loadGame(filename + ".sav");
                if (loaded != null) {
                    hero1 = (Hero) loaded[0];
                    hero2 = (Hero) loaded[1];
                    gameMap = (GameMap) loaded[2];
                    System.out.println("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.");
                } else {
                    System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å.");
                    return;
                }
            }
            case "3" -> {
                gameMap = MapEditor.createMapFromUserInput(12, 12);
                System.out.println("–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞.");
                return;
            }
            case "4" -> {
                List<String> top = ScoreManager.getTop5Scores();
                System.out.println("–¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤:");
                for (String s : top) {
                    String[] parts = s.split(",");
                    System.out.println("–ò–º—è: " + parts[0] + ", –ö–∞—Ä—Ç–∞: " + parts[1] + ", –û—á–∫–∏: " + parts[2]);
                }
                return;
            }
        }

        System.out.println("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    }

    private static boolean isPrimaryAction(String cmd) {
        return cmd.equals("move") || cmd.equals("buy") || cmd.equals("build") || cmd.equals("attack");
    }

    private static void printHelp() {
        System.out.println("–ö–æ–º–∞–Ω–¥—ã:");
        System.out.println("move X Y - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ");
        System.out.println("attack - –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤—Ä–∞–≥–∞");
        System.out.println("buy - –∫—É–ø–∏—Ç—å —é–Ω–∏—Ç–∞");
        System.out.println("build - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏–µ");
        System.out.println("stats - –ø–æ–∫–∞–∑–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏");
        System.out.println("save - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É");
        System.out.println("endturn - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥");
        System.out.println("exit - –≤—ã–π—Ç–∏");
    }
}
